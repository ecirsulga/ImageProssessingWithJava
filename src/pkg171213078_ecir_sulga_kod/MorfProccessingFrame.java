/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pkg171213078_ecir_sulga_kod;

import java.awt.Color;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.awt.image.Raster;
import java.awt.image.WritableRaster;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import static pkg171213078_ecir_sulga_kod.ToBufferedImage.toBufferedImage;

/**
 *
 * @author ecome
 */
public class MorfProccessingFrame extends javax.swing.JFrame {

    /**
     * Creates new form MorfProccessingFrame
     */
    public MorfProccessingFrame() {
        initComponents();
    }
    Image lastImage;
    BufferedImage image;

    public MorfProccessingFrame(Image lastImage) {
        initComponents();

        this.lastImage = lastImage;
        imageFinal.setIcon(new ImageIcon(lastImage));
        image = toBufferedImage(lastImage);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        cmbMorf = new javax.swing.JComboBox<>();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        imageFinal = new javax.swing.JLabel();
        btnNext = new javax.swing.JButton();
        rbMorfApprove = new javax.swing.JRadioButton();
        rbMorfReject = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        cmbMorf.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seçiniz", "Siyah beyaz resimde genişletme", "Siyah beyaz resimde erozyon " }));
        cmbMorf.setEnabled(false);
        cmbMorf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbMorfActionPerformed(evt);
            }
        });

        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Resim Önizleme");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(imageFinal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(142, 142, 142)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(159, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(imageFinal, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(32, Short.MAX_VALUE))
        );

        btnNext.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        btnNext.setText("İleri");
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });

        buttonGroup1.add(rbMorfApprove);
        rbMorfApprove.setText("Morfolojik işlemler uygulamak istiyorum.");
        rbMorfApprove.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rbMorfApproveStateChanged(evt);
            }
        });
        rbMorfApprove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbMorfApproveActionPerformed(evt);
            }
        });

        buttonGroup1.add(rbMorfReject);
        rbMorfReject.setSelected(true);
        rbMorfReject.setText("Morfolojik işlemler uygulamak istemiyorum.");
        rbMorfReject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbMorfRejectActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(670, 670, 670)
                        .addComponent(btnNext, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rbMorfReject, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rbMorfApprove, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbMorf, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(rbMorfApprove, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rbMorfReject, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cmbMorf, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(btnNext, javax.swing.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void rbMorfApproveStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rbMorfApproveStateChanged
        if (rbMorfApprove.isSelected()) {
            cmbMorf.setEnabled(true);
        } else {
            cmbMorf.setEnabled(false);
        }
    }//GEN-LAST:event_rbMorfApproveStateChanged

    private void rbMorfApproveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbMorfApproveActionPerformed

    }//GEN-LAST:event_rbMorfApproveActionPerformed

    private void rbMorfRejectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbMorfRejectActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbMorfRejectActionPerformed

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        JFrame next = new SegmentationFrame(lastImage);
        next.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_btnNextActionPerformed

    int width;
    int height;
    private void cmbMorfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbMorfActionPerformed
        BufferedImage outputImage;
        outputImage = toBufferedImage(lastImage);
        String radiusStr= JOptionPane.showInputDialog(null, "Kaç defa erozyon ya da genişletme yapılacağını giriniz.");
        int radius=Integer.valueOf(radiusStr);
        width = outputImage.getWidth();
        height = outputImage.getHeight();
        int[][] paintMatris = new int[width][height];

        if (cmbMorf.getSelectedIndex() == 1) {

            for (int i = 0; i < width; i++) {
                for (int j = 0; j < height; j++) {
                    paintMatris[i][j] = Color.BLACK.getRGB();
                }
            }
            for (int r = 0; r < radius; r++) {

                for (int i = 0; i < width; i++) {
                    for (int j = 0; j < height; j++) {
                        if (outputImage.getRGB(i, j) == Color.WHITE.getRGB()) {
                            paintMatris[i][j] = Color.WHITE.getRGB();
                            if (i - 1 >= 0) {
                                paintMatris[i - 1][j] = Color.WHITE.getRGB();
                            }
                            if (i + 1 < width) {
                                paintMatris[i + 1][j] = Color.WHITE.getRGB();
                            }
                            if (j - 1 >= 0) {
                                paintMatris[i][j - 1] = Color.WHITE.getRGB();
                            }
                            if (j + 1 < height) {
                                paintMatris[i][j + 1] = Color.WHITE.getRGB();
                            }

                        }
                    }
                }
                for (int i = 0; i < width; i++) {
                    for (int j = 0; j < height; j++) {
                        outputImage.setRGB(i, (j), paintMatris[i][j]);
                    }
                }
            }

            imageFinal.setIcon(new ImageIcon(outputImage.getScaledInstance(imageFinal.getWidth(), imageFinal.getHeight(), BufferedImage.SCALE_SMOOTH)));
            lastImage = outputImage.getScaledInstance(imageFinal.getWidth(), imageFinal.getHeight(), BufferedImage.SCALE_SMOOTH);
        } 
        else if (cmbMorf.getSelectedIndex() == 2) {
            
            for (int i = 0; i < width; i++) {
                for (int j = 0; j < height; j++) {
                    paintMatris[i][j] = Color.WHITE.getRGB();
                }
            }
            for (int r = 0; r < radius; r++) {

                for (int i = 0; i < width; i++) {
                    for (int j = 0; j < height; j++) {
                        if (outputImage.getRGB(i, j) == Color.BLACK.getRGB()) {
                            paintMatris[i][j] = Color.BLACK.getRGB();
                            if (i - 1 >= 0) {
                                paintMatris[i - 1][j] = Color.BLACK.getRGB();
                            }
                            if (i + 1 < width) {
                                paintMatris[i + 1][j] = Color.BLACK.getRGB();
                            }
                            if (j - 1 >= 0) {
                                paintMatris[i][j - 1] = Color.BLACK.getRGB();
                            }
                            if (j + 1 < height) {
                                paintMatris[i][j + 1] = Color.BLACK.getRGB();
                            }

                        }
                    }
                }
                for (int i = 0; i < width; i++) {
                    for (int j = 0; j < height; j++) {
                        outputImage.setRGB(i, (j), paintMatris[i][j]);
                    }
                }
            }

            imageFinal.setIcon(new ImageIcon(outputImage.getScaledInstance(imageFinal.getWidth(), imageFinal.getHeight(), BufferedImage.SCALE_SMOOTH)));
            lastImage = outputImage.getScaledInstance(imageFinal.getWidth(), imageFinal.getHeight(), BufferedImage.SCALE_SMOOTH);
        }
    }//GEN-LAST:event_cmbMorfActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MorfProccessingFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MorfProccessingFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MorfProccessingFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MorfProccessingFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MorfProccessingFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnNext;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<String> cmbMorf;
    private javax.swing.JLabel imageFinal;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JRadioButton rbMorfApprove;
    private javax.swing.JRadioButton rbMorfReject;
    // End of variables declaration//GEN-END:variables
}
