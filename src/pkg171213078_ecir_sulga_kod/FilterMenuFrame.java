/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pkg171213078_ecir_sulga_kod;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.util.Arrays;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import static pkg171213078_ecir_sulga_kod.ToBufferedImage.toBufferedImage;

/**
 *
 * @author ecome
 */
public class FilterMenuFrame extends javax.swing.JFrame {

    /**
     * Creates new form FilterMenuFrame
     */
    public FilterMenuFrame() {
        initComponents();
    }
    Image lastImage;
    BufferedImage image;

    public FilterMenuFrame(Image lastImage) {
        initComponents();

        this.lastImage = lastImage;
        imageFinal.setIcon(new ImageIcon(lastImage));
        image = toBufferedImage(lastImage);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        cmbFilter = new javax.swing.JComboBox<>();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        imageFinal = new javax.swing.JLabel();
        btnNext = new javax.swing.JButton();
        rbFilterApprove = new javax.swing.JRadioButton();
        rbFilterReject = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        cmbFilter.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seçiniz", "Bulanıklaştırma filtresi", "Keskinleştirme filtresi", "Kenar bulma filtresi" }));
        cmbFilter.setEnabled(false);
        cmbFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbFilterActionPerformed(evt);
            }
        });

        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Resim Önizleme");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(imageFinal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(142, 142, 142)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(159, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(imageFinal, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(32, Short.MAX_VALUE))
        );

        btnNext.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        btnNext.setText("İleri");
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });

        buttonGroup1.add(rbFilterApprove);
        rbFilterApprove.setText("Filtreleme uygulamak istiyorum.");
        rbFilterApprove.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rbFilterApproveStateChanged(evt);
            }
        });
        rbFilterApprove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbFilterApproveActionPerformed(evt);
            }
        });

        buttonGroup1.add(rbFilterReject);
        rbFilterReject.setSelected(true);
        rbFilterReject.setText("Filtreleme uygulamak istemiyorum.");
        rbFilterReject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbFilterRejectActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(670, 670, 670)
                        .addComponent(btnNext, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rbFilterReject, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rbFilterApprove, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(32, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(rbFilterApprove, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rbFilterReject, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cmbFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(btnNext, javax.swing.GroupLayout.DEFAULT_SIZE, 78, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void rbFilterApproveStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rbFilterApproveStateChanged
        if (rbFilterApprove.isSelected()) {
            cmbFilter.setEnabled(true);
        } else {
            cmbFilter.setEnabled(false);
        }
    }//GEN-LAST:event_rbFilterApproveStateChanged

    private void rbFilterApproveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbFilterApproveActionPerformed
        if (rbFilterApprove.isSelected()) {
            cmbFilter.setEnabled(true);
        } else {
            imageFinal.setIcon(new ImageIcon(lastImage));
            cmbFilter.setEnabled(false);
        }
    }//GEN-LAST:event_rbFilterApproveActionPerformed

    private void rbFilterRejectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbFilterRejectActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbFilterRejectActionPerformed

     private BufferedImage ImageConcatenation(BufferedImage org,BufferedImage sharpened){
        Color orgColor, sharpedColor;
        int R,G,B;
        int width = sharpened.getWidth();
        int height = sharpened.getHeight();
        BufferedImage outputImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
        for (int x = 0; x < width; x++) {
            for (int y = 0; y < height; y++) {
                orgColor = new Color(org.getRGB(x, y));
                sharpedColor = new Color(sharpened.getRGB(x,y));
                R = orgColor.getRed() + sharpedColor.getRed();
                G = orgColor.getGreen() + sharpedColor.getGreen();
                B = orgColor.getBlue() + sharpedColor.getBlue();
                
                if (R > 255) {
                    R = 255;
                }
                if (G > 255) {
                    G = 255;
                }
                if (B > 255) {
                    B = 255;
                }
                if (R < 0) {
                    R = 0;
                }
                if (G < 0) {
                    G = 0;
                }
                if (B < 0) {
                    B = 0;
                }
                outputImage.setRGB(x, y, new Color(R,G,B,255).getRGB());
            }
        }
        return outputImage;
        
    }
     
    private void cmbFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbFilterActionPerformed
        if (cmbFilter.getSelectedIndex() == 1) {
            int width = image.getWidth();
            int height = image.getHeight();
            BufferedImage outputImage = image;
            Color color;
            int filterBounds = 3, x, y, i, j, totalR = 0, totalG = 0, totalB = 0, meanR, meanG, meanB;
            for (x = (filterBounds - 1) / 2; x < width - (filterBounds - 1) / 2; x++) {
                for (y = (filterBounds - 1) / 2; y < height - (filterBounds - 1) / 2; y++) {
                    totalR = 0;
                    totalG = 0;
                    totalB = 0;
                    for (i = -((filterBounds - 1) / 2); i <= (filterBounds - 1) / 2; i++) {
                        for (j = -((filterBounds - 1) / 2); j <= (filterBounds - 1) / 2; j++) {
                            int p = image.getRGB(x + i, y + j);
                            int a = (p >> 24) & 0xff;
                            int r = (p >> 16) & 0xff;
                            int g = (p >> 8) & 0xff;
                            int b = p & 0xff;
                            totalR = totalR + r;
                            totalG = totalG + g;
                            totalB = totalG + b;
                        }
                    }
                    meanR = totalR / (filterBounds * filterBounds);
                    meanG = totalG / (filterBounds * filterBounds);
                    meanB = totalB / (filterBounds * filterBounds);
                    if (meanR > 255) {
                        meanR = 255;
                    }
                    if (meanG > 255) {
                        meanG = 255;
                    }
                    if (meanB > 255) {
                        meanB = 255;
                    }
                    color = new Color(meanR, meanG, meanB, 255);
                    outputImage.setRGB(x, y, color.getRGB());
                }
            }
            imageFinal.setIcon(new ImageIcon(outputImage.getScaledInstance(imageFinal.getWidth(), imageFinal.getHeight(), BufferedImage.SCALE_SMOOTH)));
            lastImage = outputImage.getScaledInstance(imageFinal.getWidth(), imageFinal.getHeight(), BufferedImage.SCALE_SMOOTH);
        } 
        else if (cmbFilter.getSelectedIndex() == 2) {
        int width = image.getWidth();
        int height = image.getHeight();
        BufferedImage outputImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
        Color color;
        //int[] filterMatrix = new int[]{0,1,0 , 1,-4,1 , 0,1,0};
        int[] filterMatrix = new int[]{-1,-1,-1 , -1,8,-1 , -1,-1,-1};
        int sum =  Arrays.stream(filterMatrix).sum();
        int filterBounds = 3, x, y, i, j, totalR, totalG, totalB, R, G, B,k=0;

        for (x = (filterBounds - 1) / 2; x < width - (filterBounds - 1) / 2; x++) {
            for (y = (filterBounds - 1) / 2; y < height - (filterBounds - 1) / 2; y++) {
                totalR = 0;
                totalG = 0;
                totalB = 0;
                k = 0;
                for (i = -((filterBounds - 1) / 2); i <= (filterBounds - 1) / 2; i++) {
                    for (j = -((filterBounds - 1) / 2); j <= (filterBounds - 1) / 2; j++) {
                        int p = image.getRGB(x + i, y + j);
                        int r = (p >> 16) & 0xff;
                        int g = (p >> 8) & 0xff;
                        int b = p & 0xff;
                        totalR = totalR + (r * filterMatrix[k]);
                        totalG = totalG + (g * filterMatrix[k]);
                        totalB = totalB + (b * filterMatrix[k]);
                        R = totalR;
                        G = totalG;
                        B = totalB;
                        
                        if (R > 255) 
                            R = 255;
                        if (G > 255) 
                            G = 255;
                        if (B > 255) 
                            B = 255;
                        if (R < 0) 
                            R = 0;
                        if (G < 0) 
                            G = 0;
                        if (B < 0) 
                            B = 0;
                        
                        outputImage.setRGB(x, y, new Color(R, G, B,255).getRGB());
                        k++;
                    }
                }

            }

        }
        outputImage=ImageConcatenation(image, outputImage);
        imageFinal.setIcon(new ImageIcon(outputImage.getScaledInstance(imageFinal.getWidth(), imageFinal.getHeight(), BufferedImage.SCALE_SMOOTH)));
        lastImage = outputImage.getScaledInstance(imageFinal.getWidth(), imageFinal.getHeight(), BufferedImage.SCALE_SMOOTH);


        } else if (cmbFilter.getSelectedIndex() == 3) {
            int width = image.getWidth();
            int height = image.getHeight();
        BufferedImage outputImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
        Color color;
        int filterBounds = 3, x, y, i, j, totalR = 0, totalG = 0, totalB = 0, meanR, meanG, meanB;
        for (x = (filterBounds - 1) / 2; x < width - (filterBounds - 1) / 2; x++) {
            for (y = (filterBounds - 1) / 2; y < height - (filterBounds - 1) / 2; y++) {
                int p1,p2,p3,p4,p5,p6,p7,p8,p9;
                color = new Color(image.getRGB(x-1, y-1));
                p1 = color.getRed();
                
                color = new Color(image.getRGB(x, y-1));
                p2 = color.getRed();
                
                color = new Color(image.getRGB(x+1, y-1));
                p3 = color.getRed();
                
                color = new Color(image.getRGB(x-1, y));
                p4 = color.getRed();
                
                color = new Color(image.getRGB(x, y));
                p5 = color.getRed();
                
                color = new Color(image.getRGB(x+1, y));
                p6 = color.getRed();
                
                color = new Color(image.getRGB(x-1, y+1));
                p7 = color.getRed();
                
                color = new Color(image.getRGB(x, y+1));
                p8 = color.getRed();
                
                color = new Color(image.getRGB(x+1, y+1));
                p9 = color.getRed();
                
                int c = Math.abs((p1 + 2 * p2 + p3) - (p7 + 2 * p8 + p9)) + Math.abs((p3 + 2 * p6 + p9) - (p1 + 2 * p4 + p7));
                if (c>255) {
                    c = 255;
                }
                outputImage.setRGB(x,y, new Color(c,c,c,255).getRGB());
            }

        }
        imageFinal.setIcon(new ImageIcon(outputImage.getScaledInstance(imageFinal.getWidth(), imageFinal.getHeight(), BufferedImage.SCALE_SMOOTH)));
        lastImage = outputImage.getScaledInstance(imageFinal.getWidth(), imageFinal.getHeight(), BufferedImage.SCALE_SMOOTH);
        }
    }//GEN-LAST:event_cmbFilterActionPerformed

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        JFrame next= new MorfProccessingFrame(lastImage);
        next.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_btnNextActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FilterMenuFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FilterMenuFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FilterMenuFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FilterMenuFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FilterMenuFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnNext;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<String> cmbFilter;
    private javax.swing.JLabel imageFinal;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JRadioButton rbFilterApprove;
    private javax.swing.JRadioButton rbFilterReject;
    // End of variables declaration//GEN-END:variables
}
