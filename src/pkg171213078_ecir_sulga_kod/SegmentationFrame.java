/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pkg171213078_ecir_sulga_kod;

import java.awt.Color;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.util.Random;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import static pkg171213078_ecir_sulga_kod.ToBufferedImage.toBufferedImage;

/**
 *
 * @author ecome
 */
public class SegmentationFrame extends javax.swing.JFrame {

    /**
     * Creates new form SegmentationFrame
     */
    public SegmentationFrame() {
        initComponents();
    }
    Image lastImage;
    BufferedImage image;

    public SegmentationFrame(Image lastImage) {
        initComponents();
        this.lastImage = lastImage;
        imageFinal.setIcon(new ImageIcon(lastImage));
        image = toBufferedImage(lastImage);
        Fill();
    }
    static Color[] colors = new Color[100];
    private static Color getRandomColor() {
        int r, g, b;
        r = new Random().nextInt(256);
        g = new Random().nextInt(256);
        b = new Random().nextInt(256);
       
        return new Color(r,g,b,255);
    }
   
    private static void Fill(){
        for (int i = 0; i < colors.length; i++) {
            colors[i] = getRandomColor();
        }
    }
   
    private Color getColor(int m) {
     
        return colors[m % colors.length];
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        cmbMorf = new javax.swing.JComboBox<>();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        imageFinal = new javax.swing.JLabel();
        btnNext = new javax.swing.JButton();
        rbMorfApprove = new javax.swing.JRadioButton();
        rbMorfReject = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        cmbMorf.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seçiniz", "Siyah beyaz resimde 4’lü komşuluk ile nesne bulma ve gösterme", "Gri seviye resimde istenilen bir yöntemle nesne bulma ve gösterme", "Renkli resimde istenilen bir yöntemle nesne bulma ve gösterme ", " ", " " }));
        cmbMorf.setEnabled(false);
        cmbMorf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbMorfActionPerformed(evt);
            }
        });

        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Resim Önizleme");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(imageFinal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(142, 142, 142)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(159, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(imageFinal, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(32, Short.MAX_VALUE))
        );

        btnNext.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        btnNext.setText("İleri");
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });

        buttonGroup1.add(rbMorfApprove);
        rbMorfApprove.setText("Segmentasyon uygulamak istiyorum.");
        rbMorfApprove.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rbMorfApproveStateChanged(evt);
            }
        });
        rbMorfApprove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbMorfApproveActionPerformed(evt);
            }
        });

        buttonGroup1.add(rbMorfReject);
        rbMorfReject.setSelected(true);
        rbMorfReject.setText("Segmentasyon uygulamak istemiyorum.");
        rbMorfReject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbMorfRejectActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(714, 714, 714)
                        .addComponent(btnNext, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rbMorfReject, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rbMorfApprove, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbMorf, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(32, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(rbMorfApprove, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rbMorfReject, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cmbMorf, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(btnNext, javax.swing.GroupLayout.DEFAULT_SIZE, 67, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    BufferedImage outputImage = null;
    int[][] imageMatrix = null;

    void doUnion(int a, int b, int[] component) {
        // get the root component of a and b, and set the one's parent to the other
        while (component[a] != a) {
            a = component[a];
        }
        while (component[b] != b) {
            b = component[b];
        }
        component[b] = a;
    }

    void unionCoords(int x, int y, int x2, int y2, int w, int h, int[] component) {
        if (y2 < h && x2 < w && imageMatrix[x][y] == 255 && imageMatrix[x2][y2] == 255) {
            doUnion(x * h + y, x2 * h + y2, component);
        }
    }
    public BufferedImage RGBtoGray(BufferedImage image)
    {
        int width = image.getWidth();
        int height = image.getHeight();
            for (int i = 0; i < height; i++) {
                for (int j = 0; j < width; j++) {
                    Color c = new Color(image.getRGB(j, i));
                    int red = (int) (c.getRed() * 0.299);
                    int green = (int) (c.getGreen() * 0.587);
                    int blue = (int) (c.getBlue() * 0.114);
                    Color newColor = new Color(red + green + blue, red + green + blue, red + green + blue);
                    image.setRGB(j, i, newColor.getRGB());
                }
            }
            return image;
    }
    private BufferedImage Threshold(BufferedImage image) {
        BufferedImage grayImage = RGBtoGray(image);
        BufferedImage oImage = new BufferedImage(image.getWidth(), image.getHeight(), BufferedImage.TYPE_BYTE_BINARY);
        int width = grayImage.getWidth();
        int height = grayImage.getHeight();
        int[][] array = new int[width][height];
        int threshold = 127;
        for (int x = 0; x < width; x++) {
            for (int y = 0; y < height; y++) {
                int p = grayImage.getRGB(x, y);
                int r = (p >> 16) & 0xff;
                int g = (p >> 8) & 0xff;
                int b = p & 0xff;
                int avg = (r + g + b) / 3;
 
                if (avg > threshold) {
                    oImage.setRGB(x, y, Color.WHITE.getRGB());
                } else if (avg < threshold) {
                    oImage.setRGB(x, y, Color.BLACK.getRGB());
 
                }
            }
        }
 
        return oImage;
    }
    private void rbMorfApproveStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rbMorfApproveStateChanged
        if (rbMorfApprove.isSelected()) {
            cmbMorf.setEnabled(true);
        } else {
            cmbMorf.setEnabled(false);
        }
    }//GEN-LAST:event_rbMorfApproveStateChanged

    private void rbMorfApproveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbMorfApproveActionPerformed

    }//GEN-LAST:event_rbMorfApproveActionPerformed

    private void rbMorfRejectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbMorfRejectActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbMorfRejectActionPerformed

    private void cmbMorfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbMorfActionPerformed
        if (cmbMorf.getSelectedIndex() == 1) {
        BufferedImage thresholdedImage = Threshold(image);
        int width = image.getWidth();
        int height = image.getHeight();
        imageMatrix = new int[width][height];
        int[] component = new int[width * height];
 
        outputImage = new BufferedImage(image.getWidth(), image.getHeight(), BufferedImage.TYPE_INT_ARGB);
        for (int x = 0; x < width; x++) {
            for (int y = 0; y < height; y++) {
                int p = thresholdedImage.getRGB(x, y);
                int r = (p >> 16) & 0xff;
                imageMatrix[x][y] = r;
            }
        }
 
        for (int i = 0; i < width * height; i++) {
            component[i] = i;
        }
 
        for (int x = 0; x < width; x++) {
            for (int y = 0; y < height; y++) {
                unionCoords(x, y, x + 1, y, width, height, component);
                unionCoords(x, y, x, y + 1, width, height, component);
            }
        }
 
        for (int x = 0; x < width; x++) {
            for (int y = 0; y < height; y++) {
                int p = thresholdedImage.getRGB(x, y);
                int r = (p >> 16) & 0xff;
                if (r == 0) {
                    continue;
                }
                int c = x * height + y;
                while (component[c] != c) {
                    c = component[c];
                }
                outputImage.setRGB(x, y, getColor(c).getRGB());
            }
        }
        imageFinal.setIcon(new ImageIcon(outputImage.getScaledInstance(imageFinal.getWidth(), imageFinal.getHeight(), BufferedImage.SCALE_SMOOTH)));
        lastImage = outputImage.getScaledInstance(imageFinal.getWidth(), imageFinal.getHeight(), BufferedImage.SCALE_SMOOTH);
        
        } else if (cmbMorf.getSelectedIndex() == 2) {
            BufferedImage thresholdedImage = Threshold(image);
        int width = image.getWidth();
        int height = image.getHeight();
        imageMatrix = new int[width][height];
        int[] component = new int[width * height];
 
        outputImage = new BufferedImage(image.getWidth(), image.getHeight(), BufferedImage.TYPE_INT_ARGB);
        for (int x = 0; x < width; x++) {
            for (int y = 0; y < height; y++) {
                int p = thresholdedImage.getRGB(x, y);
                int r = (p >> 16) & 0xff;
                imageMatrix[x][y] = r;
            }
        }
 
        for (int i = 0; i < width * height; i++) {
            component[i] = i;
        }
 
        for (int x = 0; x < width; x++) {
            for (int y = 0; y < height; y++) {
                unionCoords(x, y, x + 1, y, width, height, component);
                unionCoords(x, y, x, y + 1, width, height, component);
            }
        }
 
        for (int x = 0; x < width; x++) {
            for (int y = 0; y < height; y++) {
                int p = thresholdedImage.getRGB(x, y);
                int r = (p >> 16) & 0xff;
                if (r == 0) {
                    continue;
                }
                int c = x * height + y;
                while (component[c] != c) {
                    c = component[c];
                }
                outputImage.setRGB(x, y, getColor(c).getRGB());
            }
        }
        imageFinal.setIcon(new ImageIcon(outputImage.getScaledInstance(imageFinal.getWidth(), imageFinal.getHeight(), BufferedImage.SCALE_SMOOTH)));
        lastImage = outputImage.getScaledInstance(imageFinal.getWidth(), imageFinal.getHeight(), BufferedImage.SCALE_SMOOTH);

        } else if (cmbMorf.getSelectedIndex() == 3) {
            BufferedImage thresholdedImage = Threshold(image);
        int width = image.getWidth();
        int height = image.getHeight();
        imageMatrix = new int[width][height];
        int[] component = new int[width * height];
 
        outputImage = new BufferedImage(image.getWidth(), image.getHeight(), BufferedImage.TYPE_INT_ARGB);
        for (int x = 0; x < width; x++) {
            for (int y = 0; y < height; y++) {
                int p = thresholdedImage.getRGB(x, y);
                int r = (p >> 16) & 0xff;
                imageMatrix[x][y] = r;
            }
        }
 
        for (int i = 0; i < width * height; i++) {
            component[i] = i;
        }
 
        for (int x = 0; x < width; x++) {
            for (int y = 0; y < height; y++) {
                unionCoords(x, y, x + 1, y, width, height, component);
                unionCoords(x, y, x, y + 1, width, height, component);
            }
        }
 
        for (int x = 0; x < width; x++) {
            for (int y = 0; y < height; y++) {
                int p = thresholdedImage.getRGB(x, y);
                int r = (p >> 16) & 0xff;
                if (r == 0) {
                    continue;
                }
                int c = x * height + y;
                while (component[c] != c) {
                    c = component[c];
                }
                outputImage.setRGB(x, y, getColor(c).getRGB());
            }
        }
        imageFinal.setIcon(new ImageIcon(outputImage.getScaledInstance(imageFinal.getWidth(), imageFinal.getHeight(), BufferedImage.SCALE_SMOOTH)));
        lastImage = outputImage.getScaledInstance(imageFinal.getWidth(), imageFinal.getHeight(), BufferedImage.SCALE_SMOOTH);

        }
    }//GEN-LAST:event_cmbMorfActionPerformed

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        JFrame next = new SaveFrame(lastImage);
        next.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_btnNextActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SegmentationFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SegmentationFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SegmentationFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SegmentationFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SegmentationFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnNext;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<String> cmbMorf;
    private javax.swing.JLabel imageFinal;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JRadioButton rbMorfApprove;
    private javax.swing.JRadioButton rbMorfReject;
    // End of variables declaration//GEN-END:variables
}
